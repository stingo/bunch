<p id="notice"><%= notice %></p>

<p>
  <strong>Title:</strong>
  <%= @song.title %>
</p>

<p>
  <strong>Description:</strong>
  <%= @song.description %>
</p>

<p>
  <strong>Songcover:</strong>
  <%= @song.songcover %>
</p>

<p>
  <strong>Audio:</strong>
  <%= @song.audio %>
</p>





<%= @song.sound.url %>


<div class="hide">
     <ul id="playlist">

<li sound="<%= @song.sound.url if @song.sound %>" songcover="<%= @song.songcover.url if @song.songcover %> "  audiotitle="<%= truncate(@song.title, length: 14) if @song.title %>">      

    </li>

    </ul>

    </div>






<%= link_to 'Edit', edit_song_path(@song) %> |
<%= link_to 'Back', songs_path %> |
<%= link_to 'Destroy', @song, method: :delete, data: { confirm: 'Are you sure?' } %>


<%if @song.title? %>


<footer class="footer-wrapper" role="contentinfo"> 

      <div class="footer">


       



        <div id="audio-player">
    <div id="audio-info">      
      
      <span class="artist"></span>
    </div>

<div id = "playercontainer centered">

<div class ="coverup">

   

        <div id="tracker">

      <div id="progressBar">
        <div id="progress"></div>
      </div>
     
     


<div id="buttons">
     <span>
      <button id="prev"></button>
      <button id="play"></button>
      <button id="pause"></button>
      <!--button id="stop"></button-->
      <button id="next"></button>
      <button id="speaker"></button>
      <button id="mute"></button>
      <button id="unloop"></button>
      <button id="loop"></button>
      </span>
<span id="duration"> </span>




       





        





</div> <!--playercontainer-->


<div class="playControls_preachbadge">

<div class="pull-left">
<div class="volume" style="position: relative; bottom: 0px; background-color: rgb(0, 0, 0); cursor: pointer; border-radius: 5px; height: 10px; border: 1px solid rgb(0, 0, 0); box-shadow: 0px 0px 5px rgb(255, 255, 255); width: 10px;">
<div class="volume-wrapper" style="border: 1px solid rgb(255, 255, 255); border-radius: 4px; height: 8px; width: 8px; position: absolute; bottom: 0px;"><div class="level" style="background:#fff; height: 100%; width: 8px;"></div></div></div>



           <div id="audio-image">
           <img class="cover" />

           






          </div>

       

           </div>


<div class="">

           <a class="playbackpreachbadge_context po-link-light" title="Playing track" href=""> Playing</a>
           <a class="audiotitle"></a>
             



           </div>

             <!-- analyzer -->
         
     



     </div>
        </div>
         </div>


       
      </div>


    <!-- /.buttons -->
    </footer><!-- /.FOOTER -->


    <% end %>
  









    <!--script for player-->

    <script>

var audio;

// Establish all variables that your Analyser will use
var canvas, ctx, source, context, analyser, fbc_array, bars, bar_x, grd, hue, bar_width, bar_height, numBars;


//Hide Pause Initially
$('#pause').hide();
$('#mute').hide();
$('#unloop').hide();
$('#playing').hide();

  
//Initializer - Play First Audio
initAudio($('#playlist li:first-child'));
//initAudio($('#hov li:first-child'));
  
function initAudio(element){
  var sound = element.attr('sound');
    var title = element.attr('title');
    var songcover = element.attr('songcover');
    var artist = element.attr('artist');


  
    
    

    // Progress Bar Container
  //progressBar = document.getElementById('progressBar');
 // progress = document.getElementById('progress');



  // Buttons Container
 

  
  //Create a New Audio Object
  audio = new Audio(sound);
  audio.loop = true;
  //audio.autoplay = true;
  if(!audio.currentTime){
    $('#duration').html('0.00');
  }

  $('#audio-player .title').text(title);
    $('#audio-player .artist').text(artist);
  
  //Insert Cover Image
  $('img.cover').attr('src','' + songcover);
  
  $('#playlist li').removeClass('active');
  //$('#hov li').removeClass('active');
  
    element.addClass('active');


 


}

   

//Play Button



$('#play').click(function(){



  audio.play();

    $('#play').hide();
   



  
  $('#pause').show();
  $('#duration').fadeIn(400);
  showDuration();
});




//Pause Button
$('#pause').click(function(){
  audio.pause();
  $('#pause').hide();
  $('#play').show();


    // Visualize snippet
  context = new AudioContext(); // AudioContext object instance
  analyser = context.createAnalyser(); // AnalyserNode method
  canvas = document.getElementById('analyser_render');
  ctx = canvas.getContext('2d');
  // Re-route audio playback into the processing graph of the AudioContext
  source = context.createMediaElementSource(audio); 
  source.connect(analyser);
  analyser.connect(context.destination);
  frameLooper();
  // Visualize snippet ends


});
  


  //volume


  
  //end
//Stop Button
//$('#stop').click(function(){
  //audio.pause();    
  //audio.currentTime = 0;
  //$('#pause').hide();
  //$('#play').show();
  
  //showDuration();
//});

//Play speaker
$('#speaker').click(function(){
  audio.muted = true;
  $('#speaker').hide();
  $('#mute').show();
  $('#duration').fadeIn(400);
  showDuration();
});

//Pause BMute
$('#mute').click(function(){
  
  audio.muted= false;
  $('#speaker').show();
  $('#mute').hide();
});

//Next Button
$('#next').click('ended',function(){
    audio.pause();

  $('#loop').show();
  $('#unloop').hide();
  $('#pause').show();
  $('#play').show();

    var next = $('#playlist li.active').next();
    if (next.length == 0) {
        next = $('#playlist li:first-child');
    }
    initAudio(next);
  audio.play();
  showDuration();

  // Visualize snippet
  context = new AudioContext(); // AudioContext object instance
  analyser = context.createAnalyser(); // AnalyserNode method
  canvas = document.getElementById('analyser_render');
  ctx = canvas.getContext('2d');
  // Re-route audio playback into the processing graph of the AudioContext
  source = context.createMediaElementSource(audio); 
  source.connect(analyser);
  analyser.connect(context.destination);
  frameLooper();
  // Visualize snippet ends
});

//Play unloop
$('#loop').click(function(){
  audio.loop = false;
  audio.load();
  
  $('#play').show();
  $('#loop').hide();
  $('#unloop').show();
  $('#pause').hide();
  $('#duration').fadeIn(400);
  showDuration();
});
//loop
$('#unloop').click(function(){
  audio.loop = true;
  audio.load();
  $('#loop').show();
  $('#unloop').hide();
  $('#play').show();
   $('#pause').hid();
  
});





//Prev Button
$('#prev').click(function(){
    audio.pause();
   
  $('#loop').show();
  $('#unloop').hide();
   
    var prev = $('#playlist li.active').prev();
    if (prev.length == 0) {
        prev = $('#playlist li:last-child');
    }
    initAudio(prev);
  audio.play();
  showDuration();

  // Visualize snippet
  context = new AudioContext(); // AudioContext object instance
  analyser = context.createAnalyser(); // AnalyserNode method
  canvas = document.getElementById('analyser_render');
  ctx = canvas.getContext('2d');
  // Re-route audio playback into the processing graph of the AudioContext
  source = context.createMediaElementSource(audio); 
  source.connect(analyser);
  analyser.connect(context.destination);
  frameLooper();
  // Visualize snippet ends

});

//Playlist Audio Click
$('#playlist li').click(function () {
    audio.pause();


  $('#loop').show();
  $('#unloop').hide();
   
    initAudio($(this));
  $('#play').hide();
  $('#pause').show();
  $('#duration').fadeIn(400);
  audio.play();
  showDuration();
});

//CoverPlay Audio Click



//Volume Control
$('#volume').change(function(){

  audio.volume = parseFloat(this.value / 100);
});


 
  

//Time Duration
function showDuration(){
  $(audio).bind('timeupdate', function(){
    //Get hours and minutes
    var s = parseInt(audio.currentTime % 60);
    var m = parseInt((audio.currentTime / 60) % 60);
    //Add 0 if seconds less than 10
    if (s < 10) {
      s = '0' + s;
    }
    $('#duration').html(m + '.' + s); 
    var value = 0;
    if (audio.currentTime > 0) {
      value = Math.floor((100 / audio.duration) * audio.currentTime);
    }
    $('#progress').css('width',value+'%');
  });


}



</script> 

<!-- ANALYZER-->
<script>
// Create a new instance of an audio object and adjust some of its properties


var SMOOTHING = 0.8;
var FFT_SIZE = 2048;

//

    //

window.addEventListener("load", initMp3Player, true);
function initMp3Player(){
  document.getElementById('audio_box').appendChild(audio);
  context = new AudioContext(); // AudioContext object instance
  analyser = context.createAnalyser(); // AnalyserNode method
  canvas = document.getElementById('analyser_render');
  ctx = canvas.getContext('2d');
 
  // Re-route audio playback into the processing graph of the AudioContext
  source = context.createMediaElementSource(audio); 
  source.connect(analyser);
  analyser.connect(context.destination);
  frameLooper();
}


// frameLooper() animates any style of graphics you wish to the audio frequency
// Looping at the default frame rate that the browser provides(approx. 60 FPS)
function frameLooper(){
  window.requestAnimationFrame(frameLooper);
  fbc_array = new Uint8Array(analyser.frequencyBinCount);
  analyser.getByteFrequencyData(fbc_array);
  ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
 

//ctx.fillStyle = 'gradient';

  ctx.lineCap = 'round';
  bars = 840;
  for (var i = 0; i < bars; i++) {
    bar_x = i * 3;
    bar_width = 0.4;
    bar_height = -(fbc_array[i] / 2);

    
     
     
    //  fillRect( x, y, width, height ) // Explanation of the parameters below
    ctx.fillRect(bar_x, canvas.height, bar_width, bar_height);
    
    ctx.fillStyle = "#ffffff";
    ctx.fillS = grd;
  }
}

draw();



VisualizerSample.prototype.draw = function() {
  this.analyser.smoothingTimeConstant = SMOOTHING;
  this.analyser.fftSize = FFT_SIZE;

  // Get the frequency data from the currently playing music
  this.analyser.getByteFrequencyData(this.freqs);
  this.analyser.getByteTimeDomainData(this.times);

  var width = Math.floor(1/this.freqs.length, 10);

  var canvas = document.querySelector('canvas');
  var drawContext = canvas.getContext('2d');
  canvas.width = WIDTH;
  canvas.height = HEIGHT;
  // Draw the frequency domain chart.
  for (var i = 0; i < this.analyser.frequencyBinCount; i++) {
    var value = this.freqs[i];
    var percent = value / 256;
    var height = HEIGHT * percent;
    var offset = HEIGHT - height - 1;
    var barWidth = WIDTH/this.analyser.frequencyBinCount;
    var hue = i/this.analyser.frequencyBinCount * 360;
    drawContext.fillStyle = 'hsl(' + hue + ', 100%, 50%)';
    drawContext.fillRect(i * barWidth, offset, barWidth, height);
  }

  // Draw the time domain chart.
  for (var i = 0; i < this.analyser.frequencyBinCount; i++) {
    var value = this.times[i];
    var percent = value / 256;
    var height = HEIGHT * percent;
    var offset = HEIGHT - height - 1;
    var barWidth = WIDTH/this.analyser.frequencyBinCount;
    drawContext.fillStyle = 'white';
    drawContext.fillRect(i * barWidth, offset, 1, 2);
  }

  if (this.isPlaying) {
    requestAnimFrame(this.draw.bind(this));
  }
}

VisualizerSample.prototype.getFrequencyValue = function(freq) {
  var nyquist = context.sampleRate/2;
  var index = Math.round(freq/nyquist * this.freqs.length);
  return this.freqs[index];
}
</script>


